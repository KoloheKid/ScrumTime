// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static class MVC {
    public static ScrumTime.Controllers.AccountController Account = new ScrumTime.Controllers.T4MVC_AccountController();
    public static ScrumTime.Controllers.DashboardController Dashboard = new ScrumTime.Controllers.T4MVC_DashboardController();
    public static ScrumTime.Controllers.HomeController Home = new ScrumTime.Controllers.T4MVC_HomeController();
    public static ScrumTime.Controllers.ProductController Product = new ScrumTime.Controllers.T4MVC_ProductController();
    public static ScrumTime.Controllers.ReleaseController Release = new ScrumTime.Controllers.T4MVC_ReleaseController();
    public static ScrumTime.Controllers.ScheduleController Schedule = new ScrumTime.Controllers.T4MVC_ScheduleController();
    public static ScrumTime.Controllers.ScrumController Scrum = new ScrumTime.Controllers.T4MVC_ScrumController();
    public static ScrumTime.Controllers.SprintController Sprint = new ScrumTime.Controllers.T4MVC_SprintController();
    public static ScrumTime.Controllers.StoryController Story = new ScrumTime.Controllers.T4MVC_StoryController();
    public static ScrumTime.Controllers.TaskController Task = new ScrumTime.Controllers.T4MVC_TaskController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC {
}

namespace System.Web.Mvc {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class T4Extensions {
        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result) {
            return htmlHelper.RouteLink(linkText, result.GetRouteValueDictionary());
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes) {
            return ActionLink(htmlHelper, linkText, result, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, IDictionary<string, object> htmlAttributes) {
            return htmlHelper.RouteLink(linkText, result.GetRouteValueDictionary(), htmlAttributes);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod) {
            return htmlHelper.BeginForm(result, formMethod, null);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, object htmlAttributes) {
            return BeginForm(htmlHelper, result, formMethod, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, IDictionary<string, object> htmlAttributes) {
            var callInfo = result.GetT4MVCResult();
            return htmlHelper.BeginForm(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary, formMethod, htmlAttributes);
        }

        public static void RenderAction(this HtmlHelper htmlHelper, ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            htmlHelper.RenderAction(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary);
        }

        public static MvcHtmlString Action(this HtmlHelper htmlHelper, ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return htmlHelper.Action(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary);
        }
        public static string Action(this UrlHelper urlHelper, ActionResult result) {
            return urlHelper.RouteUrl(result.GetRouteValueDictionary());
        }

        public static string ActionAbsolute(this UrlHelper urlHelper, ActionResult result) {
            return string.Format("{0}{1}",urlHelper.RequestContext.HttpContext.Request.Url.GetLeftPart(UriPartial.Authority),
                urlHelper.RouteUrl(result.GetRouteValueDictionary()));
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions);
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, IDictionary<string, object> htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, htmlAttributes);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result) {
            return MapRoute(routes, name, url, result, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults) {
            return MapRoute(routes, name, url, result, defaults, null /*constraints*/, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, string[] namespaces) {
            return MapRoute(routes, name, url, result, null /*defaults*/, namespaces);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, object constraints) {
            return MapRoute(routes, name, url, result, defaults, constraints, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, string[] namespaces) {
            return MapRoute(routes, name, url, result, defaults, null /*constraints*/, namespaces);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Create and add the route
            var route = CreateRoute(url, result, defaults, constraints, namespaces);
            routes.Add(name, route);
            return route;
        }

        // Note: can't name the AreaRegistrationContext methods 'MapRoute', as that conflicts with the existing methods
        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result) {
            return MapRouteArea(context, name, url, result, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults) {
            return MapRouteArea(context, name, url, result, defaults, null /*constraints*/, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, string[] namespaces) {
            return MapRouteArea(context, name, url, result, null /*defaults*/, namespaces);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, object constraints) {
            return MapRouteArea(context, name, url, result, defaults, constraints, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, string[] namespaces) {
            return MapRouteArea(context, name, url, result, defaults, null /*constraints*/, namespaces);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Create and add the route
            var route = CreateRoute(url, result, defaults, constraints, namespaces);
            context.Routes.Add(name, route);
            route.DataTokens["area"] = context.AreaName;
            return route;
        }

        private static Route CreateRoute(string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Start by adding the default values from the anonymous object (if any)
            var routeValues = new RouteValueDictionary(defaults);

            // Then add the Controller/Action names and the parameters from the call
            foreach (var pair in result.GetRouteValueDictionary()) {
                routeValues.Add(pair.Key, pair.Value);
            }

            var routeConstraints = new RouteValueDictionary(constraints);

            // Create and add the route
            var route = new Route(url, routeValues, routeConstraints, new MvcRouteHandler());

            route.DataTokens = new RouteValueDictionary();

            if (namespaces != null && namespaces.Length > 0) {
                route.DataTokens["Namespaces"] = namespaces;
            }

            return route;
        }

        public static IT4MVCActionResult GetT4MVCResult(this ActionResult result) {
            var t4MVCResult = result as IT4MVCActionResult;
            if (t4MVCResult == null) {
                throw new InvalidOperationException("T4MVC was called incorrectly. You may need to force it to regenerate by right clicking on T4MVC.tt and choosing Run Custom Tool");
            }
            return t4MVCResult;
        }

        public static RouteValueDictionary GetRouteValueDictionary(this ActionResult result) {
            return result.GetT4MVCResult().RouteValueDictionary;
        }

        public static ActionResult AddRouteValues(this ActionResult result, object routeValues) {
            return result.AddRouteValues(new RouteValueDictionary(routeValues));
        }

        public static ActionResult AddRouteValues(this ActionResult result, RouteValueDictionary routeValues) {
            RouteValueDictionary currentRouteValues = result.GetRouteValueDictionary();

            // Add all the extra values
            foreach (var pair in routeValues) {
                currentRouteValues.Add(pair.Key, pair.Value);
            }

            return result;
        }

        public static ActionResult AddRouteValues(this ActionResult result, System.Collections.Specialized.NameValueCollection nameValueCollection) {
            // Copy all the values from the NameValueCollection into the route dictionary
            nameValueCollection.CopyTo(result.GetRouteValueDictionary());
            return result;
        }

        public static ActionResult AddRouteValue(this ActionResult result, string name, object value) {
            RouteValueDictionary routeValues = result.GetRouteValueDictionary();
            routeValues.Add(name, value);
            return result;
        }
        
        public static void InitMVCT4Result(this IT4MVCActionResult result, string area, string controller, string action) {
            result.Controller = controller;
            result.Action = action;
            result.RouteValueDictionary = new RouteValueDictionary();
             
            result.RouteValueDictionary.Add("Controller", controller);
            result.RouteValueDictionary.Add("Action", action);
        }

        public static bool FileExists(string virtualPath) {
            if (!HostingEnvironment.IsHosted) return false;
            string filePath = HostingEnvironment.MapPath(virtualPath);
            return System.IO.File.Exists(filePath);
        }

        static DateTime CenturyBegin=new DateTime(2001,1,1);
        public static string TimestampString(string virtualPath) {
            if (!HostingEnvironment.IsHosted) return string.Empty;
            string filePath = HostingEnvironment.MapPath(virtualPath);
            return Convert.ToString((System.IO.File.GetLastWriteTimeUtc(filePath).Ticks-CenturyBegin.Ticks)/1000000000,16);            
        }
    }
}

   
[GeneratedCode("T4MVC", "2.0")]   
public interface IT4MVCActionResult {   
    string Action { get; set; }   
    string Controller { get; set; }   
    RouteValueDictionary RouteValueDictionary { get; set; }   
}   
  

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult {
    public T4MVC_ActionResult(string area, string controller, string action): base()  {
        this.InitMVCT4Result(area, controller, action);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string excanvas_min_js = Url("excanvas.min.js");
        public static readonly string jquery_1_4_2_min_js = Url("jquery-1.4.2.min.js");
        public static readonly string jquery_ui_1_8_4_custom_min_js = Url("jquery-ui-1.8.4.custom.min.js");
        public static readonly string jquery_jqplot_min_js = Url("jquery.jqplot.min.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Plugins {
            private const string URLPATH = "~/Scripts/Plugins";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string cookie_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cookie_plugin.min.js") ? Url("cookie_plugin.min.js") : Url("cookie_plugin.js");
                          
            public static readonly string jqplot_barRenderer_min_js = Url("jqplot.barRenderer.min.js");
            public static readonly string jqplot_canvasAxisLabelRenderer_min_js = Url("jqplot.canvasAxisLabelRenderer.min.js");
            public static readonly string jqplot_canvasAxisTickRenderer_min_js = Url("jqplot.canvasAxisTickRenderer.min.js");
            public static readonly string jqplot_canvasTextRenderer_min_js = Url("jqplot.canvasTextRenderer.min.js");
            public static readonly string jqplot_categoryAxisRenderer_min_js = Url("jqplot.categoryAxisRenderer.min.js");
            public static readonly string jqplot_dateAxisRenderer_min_js = Url("jqplot.dateAxisRenderer.min.js");
            public static readonly string jqplot_enhancedLegendRenderer_min_js = Url("jqplot.enhancedLegendRenderer.min.js");
            public static readonly string jqplot_logAxisRenderer_min_js = Url("jqplot.logAxisRenderer.min.js");
            public static readonly string jqplot_pointLabels_min_js = Url("jqplot.pointLabels.min.js");
        }
    
        public static readonly string scrumtime_dashboard_1_0_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/scrumtime-dashboard-1.0.min.js") ? Url("scrumtime-dashboard-1.0.min.js") : Url("scrumtime-dashboard-1.0.js");
                      
        public static readonly string scrumtime_main_1_0_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/scrumtime-main-1.0.min.js") ? Url("scrumtime-main-1.0.min.js") : Url("scrumtime-main-1.0.js");
                      
        public static readonly string scrumtime_product_1_0_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/scrumtime-product-1.0.min.js") ? Url("scrumtime-product-1.0.min.js") : Url("scrumtime-product-1.0.js");
                      
        public static readonly string scrumtime_release_1_0_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/scrumtime-release-1.0.min.js") ? Url("scrumtime-release-1.0.min.js") : Url("scrumtime-release-1.0.js");
                      
        public static readonly string scrumtime_schedule_1_0_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/scrumtime-schedule-1.0.min.js") ? Url("scrumtime-schedule-1.0.min.js") : Url("scrumtime-schedule-1.0.js");
                      
        public static readonly string scrumtime_scrum_1_0_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/scrumtime-scrum-1.0.min.js") ? Url("scrumtime-scrum-1.0.min.js") : Url("scrumtime-scrum-1.0.js");
                      
        public static readonly string scrumtime_sprint_1_0_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/scrumtime-sprint-1.0.min.js") ? Url("scrumtime-sprint-1.0.min.js") : Url("scrumtime-sprint-1.0.js");
                      
        public static readonly string scrumtime_story_1_0_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/scrumtime-story-1.0.min.js") ? Url("scrumtime-story-1.0.min.js") : Url("scrumtime-story-1.0.js");
                      
        public static readonly string scrumtime_task_1_0_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/scrumtime-task-1.0.min.js") ? Url("scrumtime-task-1.0.min.js") : Url("scrumtime-task-1.0.js");
                      
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Css {
            private const string URLPATH = "~/Content/Css";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string jquery_jqplot_min_css = Url("jquery.jqplot.min.css");
            public static readonly string main_css = Url("main.css");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class smooth_withgreen {
                private const string URLPATH = "~/Content/Css/smooth_withgreen";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class images {
                    private const string URLPATH = "~/Content/Css/smooth_withgreen/images";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string ui_bg_diagonals_medium_95_f8dde1_40x40_png = Url("ui-bg_diagonals-medium_95_f8dde1_40x40.png");
                    public static readonly string ui_bg_diagonals_small_90_2d3a18_40x40_png = Url("ui-bg_diagonals-small_90_2d3a18_40x40.png");
                    public static readonly string ui_bg_flat_0_8dd864_40x100_png = Url("ui-bg_flat_0_8dd864_40x100.png");
                    public static readonly string ui_bg_flat_75_ffffff_40x100_png = Url("ui-bg_flat_75_ffffff_40x100.png");
                    public static readonly string ui_bg_glass_65_ffffff_1x400_png = Url("ui-bg_glass_65_ffffff_1x400.png");
                    public static readonly string ui_bg_glass_75_dadada_1x400_png = Url("ui-bg_glass_75_dadada_1x400.png");
                    public static readonly string ui_bg_glass_75_e6e6e6_1x400_png = Url("ui-bg_glass_75_e6e6e6_1x400.png");
                    public static readonly string ui_bg_hexagon_55_e2e6d6_12x10_png = Url("ui-bg_hexagon_55_e2e6d6_12x10.png");
                    public static readonly string ui_bg_highlight_soft_75_cccccc_1x100_png = Url("ui-bg_highlight-soft_75_cccccc_1x100.png");
                    public static readonly string ui_icons_222222_256x240_png = Url("ui-icons_222222_256x240.png");
                    public static readonly string ui_icons_44c318_256x240_png = Url("ui-icons_44c318_256x240.png");
                    public static readonly string ui_icons_454545_256x240_png = Url("ui-icons_454545_256x240.png");
                    public static readonly string ui_icons_555555_256x240_png = Url("ui-icons_555555_256x240.png");
                    public static readonly string ui_icons_cd0a0a_256x240_png = Url("ui-icons_cd0a0a_256x240.png");
                    public static readonly string ui_icons_ee9e11_256x240_png = Url("ui-icons_ee9e11_256x240.png");
                }
            
                public static readonly string jquery_ui_1_8_4_custom_css = Url("jquery-ui-1.8.4.custom.css");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class smoothness {
                private const string URLPATH = "~/Content/Css/smoothness";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class images {
                    private const string URLPATH = "~/Content/Css/smoothness/images";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string ui_bg_flat_0_aaaaaa_40x100_png = Url("ui-bg_flat_0_aaaaaa_40x100.png");
                    public static readonly string ui_bg_flat_75_ffffff_40x100_png = Url("ui-bg_flat_75_ffffff_40x100.png");
                    public static readonly string ui_bg_glass_55_fbf9ee_1x400_png = Url("ui-bg_glass_55_fbf9ee_1x400.png");
                    public static readonly string ui_bg_glass_65_ffffff_1x400_png = Url("ui-bg_glass_65_ffffff_1x400.png");
                    public static readonly string ui_bg_glass_75_dadada_1x400_png = Url("ui-bg_glass_75_dadada_1x400.png");
                    public static readonly string ui_bg_glass_75_e6e6e6_1x400_png = Url("ui-bg_glass_75_e6e6e6_1x400.png");
                    public static readonly string ui_bg_glass_95_fef1ec_1x400_png = Url("ui-bg_glass_95_fef1ec_1x400.png");
                    public static readonly string ui_bg_highlight_soft_75_cccccc_1x100_png = Url("ui-bg_highlight-soft_75_cccccc_1x100.png");
                    public static readonly string ui_icons_222222_256x240_png = Url("ui-icons_222222_256x240.png");
                    public static readonly string ui_icons_2e83ff_256x240_png = Url("ui-icons_2e83ff_256x240.png");
                    public static readonly string ui_icons_454545_256x240_png = Url("ui-icons_454545_256x240.png");
                    public static readonly string ui_icons_888888_256x240_png = Url("ui-icons_888888_256x240.png");
                    public static readonly string ui_icons_cd0a0a_256x240_png = Url("ui-icons_cd0a0a_256x240.png");
                }
            
                public static readonly string jquery_ui_1_8_4_custom_css = Url("jquery-ui-1.8.4.custom.css");
            }
        
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Images {
            private const string URLPATH = "~/Content/Images";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string asterisk_gif = Url("asterisk.gif");
            public static readonly string disk_png = Url("disk.png");
            public static readonly string favicon_ico = Url("favicon.ico");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class Logos {
                private const string URLPATH = "~/Content/Images/Logos";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string logo_graph_48x48_png = Url("logo_graph_48x48.png");
                public static readonly string ScrumTimeLogo_design = Url("ScrumTimeLogo.design");
                public static readonly string ScrumTimeLogo_png = Url("ScrumTimeLogo.png");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class Menu {
                private const string URLPATH = "~/Content/Images/Menu";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string calendar_png = Url("calendar.png");
                public static readonly string cancel24x24_png = Url("cancel24x24.png");
                public static readonly string note_accept_png = Url("note_accept.png");
                public static readonly string save24x24_png = Url("save24x24.png");
                public static readonly string trash_png = Url("trash.png");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class MessageTypes {
                private const string URLPATH = "~/Content/Images/MessageTypes";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string exclamation_png = Url("exclamation.png");
                public static readonly string information_png = Url("information.png");
                public static readonly string spinner_gif = Url("spinner.gif");
            }
        
            public static readonly string movie_png = Url("movie.png");
            public static readonly string news_paper_gif = Url("news_paper.gif");
            public static readonly string pdf_icon_gif = Url("pdf_icon.gif");
            public static readonly string screen_png = Url("screen.png");
            public static readonly string scrumtime_logo_jpg = Url("scrumtime_logo.jpg");
            public static readonly string scrumtime_tagline_jpg = Url("scrumtime_tagline.jpg");
        }
    
    }

}

static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;


    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}




namespace T4MVC {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

	

#endregion T4MVC
#pragma warning restore 1591


